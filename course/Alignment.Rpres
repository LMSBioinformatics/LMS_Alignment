Sequence Alignment Tutorial
========================================================
author: "MRC CSC Bioinformatics Core Team"
date:http://mrccsc.github.io/training.html
width: 1440
height: 1100
autosize: true
css:style.css


MRC CSC Training Resources
========================================================
* [Reproducible R](http://mrccsc.github.io/Reproducible-R/)
* [Intermediate R - Data analysis sand Visualisation](http://bioinformatics-core-shared-training.github.io/r-intermediate/)
* [Statistics in R](http://mrccsc.github.io/StatisticsInR/)
* [Genomic File Formats](http://mrccsc.github.io/genomic_formats/)
* [ChIP-seq (short)](http://mrccsc.github.io/ChIPseq_short/)
* [RNA-seq (short)](http://mrccsc.github.io/RNAseq_short/)

Overview
========================================================

* [Introduction to Seqeuncing Technology](#/Intro)
* [Revisiting File Formats](#/FileFormat)
* [Quality Assessment of Sequencing](#/SeqQC)
* [Introduction to Alignment](#/align)
* [Aligning Sequences](#/align2)
* [Sorting and indexing](#/Sorting)
* [Summary & Post-Alignment QC](#/QC)
* [Reading BAM/SAM](#/readbam)
* [Visualisation](#/vis)


Downloading data
========================================================

https://fileexchange.imperial.ac.uk/pickup.php?claimID=ZHffVJvNFHZmHzP2&claimPasscode=7ZKDxfcdYG2dac8M&emailAddr=gdharmal%40imperial.ac.uk

- Download the zip and unzip under "course" directory (this will create a new directory "Data")



Introduction to Seqeuncing Technology
========================================================
id: Intro

Illumina - Sequencing by synthesis

![Illumina](./images/Illumina.png)

#### Image Source: Illumina Inc

Introduction to Seqeuncing Technology
========================================================

![Illumina](./images/Illumina2.png)

Image Source: Illumina Inc


Introduction to Seqeuncing Technology
========================================================

![Multiplexing](./images/Multiplex_Seqeuncing.jpg)


Revisiting File Formats
========================================================
type: section
id: FileFormat


Revisiting File Formats
========================================================

## Genomic File Format Course
<br><br><br>
## http://mrccsc.github.io/genomic_formats/genomicFileFormats.html


Quality Assessment of Sequencing
========================================================
type: section
id: SeqQC


Quality Assessment of Sequencing
========================================================

### Tools for Alignment & QC
![Multiplexing](./images/Alignment_flow.jpg)

Quality Assessment of Sequencing
========================================================
- Summary
- Quality score distribtion (5' to 3')
- Adapter contamination
- GC Content
- Distribution of A/T/G/C along the sequence


Quality Assessment of Sequencing
========================================================

### R Packages: ShortRead, Rqc, SeqTools

<br>
### Quality assessment using ShortRead

<br> Key Functions in ShortRead
- <b>FastqStreamer</b> Iterate through FASTQ files in chunks
- <b>readFastq</b> Read an entire FASTQ file into memory
- <b>alphabetFrequency</b> Nucleotide or quality score use per read
- <b>alphabetByCycle</b> Nucleotide or quality score use by cycle
- <b>report</b> Generate a quality assessment report


```{r, echo=TRUE, eval=TRUE, message=FALSE}
library(ShortRead)

fastqfile <- system.file(package="ShortRead", "extdata", "E-MTAB-1147","ERR127302_1_subset.fastq.gz")
fq <- readFastq(fastqfile)

```

Quality Assessment of Sequencing
========================================================

### Exploring sequences and Quality Scores
```{r, echo=TRUE, eval=TRUE, message=FALSE}
fq
head(sread(fq), 2)
head(quality(fq), 2)
```

Quality Assessment of Sequencing
========================================================

### Quality assessment Report
```{r, echo=TRUE, eval=FALSE, message=FALSE}
qaSummary <- qa(fastqfile, type="fastq")
browseURL(report(qaSummary))
```



Quality Assessment of Sequencing
========================================================

<br><br>
### Non-R approach: FASTQC

- Handles FASTQ, BAM and SAM Files
- Provies summary table and graphs
- Exports results in HTML
- GUI & ability to run multiple FASTQ in offline mode

### Webpage: http://www.bioinformatics.babraham.ac.uk/projects/fastqc/


Quality Assessment of Sequencing
========================================================
![FASTQC1](./images/FAQSTQC1.png)


Quality Assessment of Sequencing
========================================================
![FASTQC2](./images/FASTQC2.png)


Adapter & Quality Trimming
========================================================

- Seqtk (https://github.com/lh3/seqtk)
- Trimmomatic (http://www.usadellab.org/cms/?page=trimmomatic)
- Cutadpat (https://github.com/marcelm/cutadapt)
- TrimGalore! - Wrapper for Cutadapt (http://www.bioinformatics.babraham.ac.uk/projects/trim_galore/)


Time for Exercises!
========================================================
* [Exercises Part1](./AlignmentExercise1.html)
<br><br>

* [Exercises Part1 Solutions](./AlignmentExercise1_Solutions.html)




Sequence Alignment
========================================================
type: section
id: align


Sequence Alignment
========================================================

![Alignment](./images/alignment1.jpg)

### Challenges
- Millions of short reads (36bp to 100bp)
- Identifying unique positions in the genome
- Repetitive regions in the genome
- Orientation of reads relative to genome is not known
- Sequencing reads have error

Sequence Alignment
========================================================

### How to
- Align reads efficiently in terms of memory and time?
- Account for mismatches and repeat regions 


<br><br>
### Two approaches
- Spaced seed and Extend
    + MAQ
    + BFAST
    + SHRiMP
- Burrows-Wheeler transform (BWT)
    + BWA
    + Bowtie


Spaced Seed & Extend
========================================================

![seed](./images/spacedseed.jpeg)

- Reference genome cut in to small "seeds"
- Pairs of spaced seeds are stored in index (lookup table)
- Seqeucning reads cut into 4 equal parts (read seeds)
- Seed pairs are used as keys to search the lookup table

#### Image: Nature Biotechnology 2009 27(5): 455-457

Burrows-Wheeler transform (BWT)
========================================================

![bwt](./images/bwt.jpeg)

- BWT helps to index entire human genome in less than 2 gb memory
- Aligner matches end of reads against the index (increasing one base at a time)
- If no perfect alignment found,  back up and try again with substitution
- Breakdown approach: First solving simple sub-problem (aligning one base) and use that to solve slighly harder problem (aligning two base)
- ~30 fold faster than spaced seed methods

#### Image: Nature Biotechnology 2009 27(5): 455-457

Spliced read aligners
========================================================

![alignment2](./images/alignment2.jpg)


- Aligning transcript reads to genome (reads overlapping with splice junction)
- With or without known splice junction databases
- Aligners: Tophat, STAR, MapSplice


Aligning Sequences
========================================================
type: section
id: align2


Aligning sequences with Rbowtie
========================================================

### Required Input
- Genome fasta
- Sequencing reads (fastq)
- User specified parameters 

<br><br><br>
### Data

- ChIPseq of CTCF, bone marrow macrophage (Mus musculus) from ENCODE (https://www.encodeproject.org/experiments/ENCSR000CFJ/)
- Reads from chr1 used for this exercise

Aligning sequences with Rbowtie
========================================================

### Building Index for the genome

#### Help for building index: bowtie_build_usage()

```{r, echo=TRUE, eval=TRUE, message=FALSE, tidy=T, collapse=TRUE}
library(Rbowtie)
bowtie_build_usage()
```

Aligning sequences with Rbowtie
========================================================

### Building Index

```{r, echo=TRUE, eval=FALSE, message=FALSE}
refFasta <- list.files(path="Data",pattern="chr1.fa$", full=T)
tmp <- bowtie_build(references=refFasta, outdir="Data", prefix="mm9index_chr1", force=TRUE)
```

Aligning sequences with Rbowtie
========================================================

#### Help for aligning sequences: bowtie_usage()

```{r, echo=TRUE, eval=TRUE, message=FALSE, strip.white=T, collapse=TRUE}
bowtie_usage()
```


Aligning sequences with Rbowtie
========================================================

```{r, echo=TRUE, eval=FALSE, message=FALSE}

bowtie(sequences="Data/ENCFF001LGM_chr1.fastq",
       index=file.path("Data", "mm9index_chr1"), 
       outfile="Data/CTCF_mm9_MF.sam",
       sam=TRUE, 
       best=TRUE, 
       force=TRUE,
       threads=2,
       type="single", m=1
       )

```

```{r, echo=TRUE, eval=FALSE, message=FALSE}
# reads processed: 975396
# reads with at least one reported alignment: 967484 (99.19%)
# reads that failed to align: 7340 (0.75%)
# reads with alignments suppressed due to -m: 572 (0.06%)
# Reported 967484 alignments to 1 output stream(s)
```



Spliced Alignment using SpliceMap
========================================================

- To generate spliced alignments (RNA-Seq)
- SpliceMap uses bowtie
- Accepts paramets as named list
- Limitation: reads should be at least 50bp


### Data
- RNA-Seq of Liver (Mus musculus E12.5) from ENCODE: https://www.encodeproject.org/experiments/ENCSR648YEP/
- Single end
- Reads from chr1 used for this exercise


Spliced Alignment using SpliceMap
========================================================

### Aligning the sequences using SpliceMap

```{r, echo=TRUE, eval=FALSE, message=FALSE}
readsFiles <- "Data/ENCFF905YGD_chr1.fastq"
refDir <- "Data/chr1.fa"
samFiles <- "Data/ENCFF905YGD_chr1.sam"
cfg <- list(genome_dir=refDir,
            reads_list1=readsFiles,
            read_format="FASTQ",
            quality_format="phred-33",
            outfile=samFiles,
            temp_path=tempdir(),
            max_intron=400000,
            max_multi_hit=10,
            seed_mismatch=1,
            read_mismatch=2,
            num_chromosome_together=2,
            bowtie_base_dir="Data/mm9index_chr1",
            num_threads=4,
            try_hard="yes",
            selectSingleHit=TRUE)
res <- SpliceMap(cfg)
```



Sorting & Indexing
========================================================
type: section
id: Sorting


Sorting & Indexing the SAM/BAM
========================================================

<br><br>
### Sorting SAM/BAM

- Most post-processing methods requires reads sorted by aligned position
- Sorted and indexed large files enable random access of required genomic regions

### Tools
- R: Rsamtools
- Non-R: samtools, Picard


Sorting & Indexing the SAM/BAM
========================================================
<br><br>
### Convert SAM to BAM

- `asBam` converts SAM to BAM, sort and index
```{r, echo=TRUE, eval=FALSE, message=FALSE}
library(Rsamtools)
insam <- "Data/CTCF_mm9_MF.sam"
outbam <- "Data/CTCF_mm9_MF"
asBam(insam, outbam, overwrite=T)
```

- Sorting and Indexing a BAM
```{r, echo=TRUE, eval=FALSE, message=FALSE}
sortBam(InputBAM, SortedBAM, byQname=F, maxMemory=512)
indexBam(SortedBAM)
```


Few key functions in Rsamtools
========================================================

- <b>scanBamHeader</b>: Read the SAM header section
- <b>countBam</b>: Count number reads (accepts `ScanBamParam` object)
- <b>mergeBam</b>: Merge BAM files
- <b>asSam</b>: Convert BAM to SAM

<br><br>
```{r, echo=TRUE, eval=TRUE, message=FALSE}
headerinfo <- scanBamHeader("Data/CTCF_mm9_MF.bam")

chrsinbam <- lapply(scanBamHeader("Data/CTCF_mm9_MF.bam"),function(h) {names(h$targets)})
chrsinbam <- as.vector(unlist(chrsinbam))
chrsinbam
```


Sorting & Indexing using samtools
========================================================

```{r, echo=TRUE, eval=FALSE, message=FALSE}
samtools view -b in.sam > out.bam
samtools sort in.bam outputprefix
samtools index sorted.bam
```


Time for Exercises!
========================================================
* [Exercises Part2](./AlignmentExercise2.html)
<br><br>

* [Exercises Part2 Solutions](./AlignmentExercise2_Solutions.html)



Summary & Post-Alignment QC
========================================================
type: section
id: QC


Summary & Post-Alignment QC
========================================================
<br>
### Alignment Summary
- Alignment rate
- Primary and secondary alignments
- Percentage of Duplicate reads
- rRNA/mtDNA reads
- Paired reads: properly paired, unpaired, chimeric pair

```{r, echo=TRUE, eval=TRUE, message=FALSE, cache=T}
param1 <- ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE, isDuplicate=FALSE))
countBam("Data/CTCF_mm9_MF.bam",param=param1)
```


Summary & Post-Alignment QC
========================================================

### Using samtools
```{r, echo=TRUE, eval=FALSE, message=FALSE}
samtools flagstat CTCF_mm9_MF.bam
```

```{r, echo=TRUE, eval=FALSE, message=FALSE}
975396 + 0 in total (QC-passed reads + QC-failed reads)
0 + 0 duplicates
967484 + 0 mapped (99.19%:nan%)
0 + 0 paired in sequencing
0 + 0 read1
0 + 0 read2
0 + 0 properly paired (nan%:nan%)
0 + 0 with itself and mate mapped
0 + 0 singletons (nan%:nan%)
0 + 0 with mate mapped to a different chr
0 + 0 with mate mapped to a different chr (mapQ>=5)
```


ChIP-Seq QC
========================================================

- Reads summary
- Duplicate percentage
- Estimation of Fragment Length
- Cross-Coverage score at the fragment length
- Cross-coverage score at the fragment length over Cross-coverage at the read length
- Percentage of reads wthin peaks
- Percentage of reads wthin Blacklist regions

<br><br><br>
## R package: ChIPQC (https://bioconductor.org/packages/release/bioc/html/ChIPQC.html)


RNA-Seq QC
========================================================

- Reads Summary
- Uniformity of 5' to 3' gene coverage bias
- Percentage of reads on exons
- Strand specificity
- Correlation between replicates

### Tools: 
- RSeQC http://rseqc.sourceforge.net/
- Picard (CollectRnaSeqMetrics)
- RNA-SeQC 


Reading BAM/SAM
========================================================
type: section
id: readbam


Reading BAM/SAM
========================================================

### Methods for reading BAM/SAM

- <b>readAligned</b> from ShortRead package 
    – Accept multiple formats – BAM, export
    - Reads all files in a directory
    - Reads base call qualities, chromosome, position, and strand
- <b>scanBam</b> from Rsamtools package
    - scanBam reads BAM files into list structure
    - Options to select what fields and which records to import using <b>ScanBamParam</b>
- <b>readGAlignments</b> and <b>readGAlignmentPairs</b> from GenomicAlignments package
    - can accept <b>ScanBamParam</b> object



Reading BAM/SAM
========================================================

<b>ScanBamParam:</b>

```{r, echo=TRUE, eval=FALSE, message=FALSE}
# Constructor
ScanBamParam(flag = scanBamFlag(), what = character(0), which)

# Constructor helpers
scanBamFlag(isPaired = NA, isProperPair = NA, isUnmappedQuery = NA, 
    hasUnmappedMate = NA, isMinusStrand = NA, isMateMinusStrand = NA,
    isFirstMateRead = NA, isSecondMateRead = NA, isNotPrimaryRead = NA,
    isNotPassingQualityControls = NA, isDuplicate = NA)
```

Reading BAM/SAM
========================================================

- GenomicRanges package defines the GAlignments class – a specialised class for storing set of genomic alignments (ex: sequencing data) 
- Only BAM support now – future version may include other formats
- The readGAlignments function takes an additional argument, <b>param</b> allowing the user to customise which genomic regions and which fields to read from BAM
-<b>param</b> can be constructed using </b>ScanBamParam</b> function

```{r, echo=TRUE, eval=TRUE,  message=FALSE, cache=T}
library(GenomicAlignments)
bamin <- "Data/CTCF_mm9_MF.bam"
SampleAlign <- readGAlignments(bamin)
SampleAlign
```



Reading Sequence alignments (BAM/SAM)
========================================================

We can also customise which regions to read

```{r, echo=TRUE, eval=TRUE,  message=FALSE, cache=T, collapse=TRUE}
region <- GRanges("chr1",IRanges(3000000,5000000))
param1 <- ScanBamParam(what=c("rname", "pos", "cigar","qwidth"),which=region, flag=scanBamFlag(isUnmappedQuery=FALSE, isDuplicate=FALSE, isNotPassingQualityControls=FALSE))
SampleAlign1 <- readGAlignments(bamin,param=param1)
```


Overlap Counting
========================================================

- Counting number of reads overlap with exons (RNA-Seq)
- Counting number of reads overalpping with promoters or peaks in ChIP-Seq

<br><br>

- <b>countOverlaps()</b> from `GenomicRanges` package
- <b>summarizeOverlaps()</b> from `GenomicAlignments` package


Overlap Counting - countOvrelaps()
========================================================

- <b>countOverlaps()</b> tabulates number of subject intervals overlap with each interval in query, ex: counting number of sequencing reads overlap with genes in RNA-Seq

- countOverlaps(FeatureGR, AlignmentsGR)

### Counting number of reads overlapping with promoters 

```{r, echo=TRUE, eval=TRUE,  message=FALSE, cache=T, collapse=TRUE}
library(GenomicFeatures)
mm9txdb <- makeTxDbFromBiomart(biomart="ENSEMBL_MART_ENSEMBL",dataset="mmusculus_gene_ensembl", host = "may2012.archive.ensembl.org")
mm9Genes <- genes(mm9txdb)
seqlevelsStyle(mm9Genes) <- "UCSC"  # Add 'chr' to seqnames
mm9Genes_subset <- mm9Genes[seqnames(mm9Genes) == "chr1"] # Genes in chromsome 1

```


Overlap Counting - countOvrelaps()
========================================================

```{r, echo=TRUE, eval=TRUE,  message=FALSE, cache=T}
mm9Promoters <- promoters(mm9Genes_subset,upstream=1000,downstream=1000)

# Reads overlapping with promoters
CTCFCounts <- countOverlaps(mm9Promoters, SampleAlign)

# Add CTCF counts as elementMetadata to promoters object
mcols(mm9Promoters)$CTCF <- CTCFCounts

```



Overlap Counting - summarizeOverlaps()
========================================================

- Extends `countOverlaps()` by providing options to handle multiple BAMs and to handle reads overlap with multiple features
- Features can be genes, exons, transcripts or any region of interest
- Features can be GRanges or GRangesList
- Accepts `ScanBamParam` object to subset the input BAMs
- Option to control memory consumption (`yieldSize`) and parallel processing `BiocParallel::register`

### Counting modes
- Union: Count if read hits any part of one feature, else discard
- IntersectionStrict: Count if reads falls completely within in one feature, else discard
- IntersectionNotEmpty: Count if read falls in a unique disjoint region of a feature, else drop


Overlap Counting - summarizeOverlaps()
========================================================

### Counting Reads on genes for RNA-Seq 
```{r, echo=TRUE, eval=TRUE, message=FALSE, cache =T, collapse=TRUE}

seqlevels(mm9txdb) <- "1" # Filter for genes in chr1
mm9ExonsByGene <- exonsBy(mm9txdb, "gene")
seqlevelsStyle(mm9ExonsByGene) <- "UCSC"  # Add 'chr' to seqnames

BamFilesIn <-  BamFileList("Data/ENCFF905YGD_chr1.bam", yieldSize = 100000)
GenetHits <- summarizeOverlaps(mm9ExonsByGene, BamFilesIn, mode="Union", ignore.strand = T)

```


Overlap Counting - summarizeOverlaps()
========================================================

- `summarizeOverlaps` results returned as `SummarizedExperiment` object
- Counts are accessed with `assays()`

```{r, echo=TRUE, eval=TRUE, message=FALSE, cache =T}
dim(assays(GenetHits)$counts)
head(assays(GenetHits)$counts)

```


Reads on splice Junctions
========================================================

- How many reads overlapping with splice junctions
```{r, echo=TRUE, eval=TRUE, message=FALSE, cache =T, collapse=TRUE}
bamin <- "Data/ENCFF905YGD_chr1.bam"
SampleRNASeqAlign <- readGAlignments(bamin)

sum(cigarOpTable(cigar(SampleRNASeqAlign))[,"N"] > 0)

```

- Inspecting reads overlapping with splice junctions
```{r, echo=TRUE, eval=TRUE, message=FALSE, cache =T, collapse=TRUE}
SampleRNASeqAlign[cigarOpTable(cigar(SampleRNASeqAlign))[,"N"] > 0,]
```


Visualisation - Genomewide coverage
========================================================
type: section
id: vis


Visualisation - Genomewide coverage
========================================================

`coverage()` calculates how many ranges overlap with individual positions in the genome. <b>coverage</b> function returns the coverage as Rle instance.
```{r, echo=TRUE, eval=TRUE,  message=FALSE}
library(rtracklayer)
cov <- coverage(SampleAlign)
export.bw(cov[1], "SampleCov.bw") # exporting chr1
```

Coverage can be exported as BigWig, Bedgraph, Wiggle and other formats to visualise in genome browsers.


Session Info
========================================================
```{r, echo=TRUE, eval=TRUE,  message=FALSE}
sessionInfo()
```

Time for Exercises!
========================================================
* [Exercises Part3](./AlignmentExercise3.html)
<br><br>

* [Exercises Part3 Solutions](./AlignmentExercise3_Solutions.html)

