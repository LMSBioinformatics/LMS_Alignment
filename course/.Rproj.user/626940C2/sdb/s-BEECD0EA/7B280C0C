{
    "collab_server" : "",
    "contents" : "Sequence Alignment Tutorial\n========================================================\ncss: Rpress.css\nauthor: \"MRC CSC Bioinformatics Core Team\"\ndate:http://mrccsc.github.io/training.html\nwidth: 1440\nheight: 1100\nautosize: true\nfont-import: <link href='http://fonts.googleapis.com/css?family=Slabo+27px' rel='stylesheet' type='text/css'>\nfont-family: 'Slabo 27px', serif;\ncss:style.css\n\n\nMRC CSC Training Resources\n========================================================\n* [Reproducible R](http://mrccsc.github.io/Reproducible-R/)\n* [Intermediate R - Data analysis sand Visualisation](http://bioinformatics-core-shared-training.github.io/r-intermediate/)\n* [Statistics in R](http://mrccsc.github.io/StatisticsInR/)\n* [Genomic File Formats](http://mrccsc.github.io/genomic_formats/)\n* [ChIP-seq (short)](http://mrccsc.github.io/ChIPseq_short/)\n* [RNA-seq (short)](http://mrccsc.github.io/RNAseq_short/)\n\nOverview\n========================================================\n\n* [Introduction to Seqeuncing Technology](#/Intro)\n* [Revisiting File Formats](#/FileFormat)\n* [Quality Assessment of Sequencing](#/SeqQC)\n* [Introduction to Alignment](#/align)\n* [Aligning Sequences](#/align2)\n* [Sorting and indexing](#/Sorting)\n* [Summary & Post-Alignment QC](#/QC)\n* [Reading BAM](#/readbam)\n* [Visualisation](#/SeqQC)\n\n\n\nIntroduction to Seqeuncing Technology\n========================================================\nid: Intro\n\nIllumina - Sequencing by synthesis\n\n[Figure]\n\n\nIntroduction to Seqeuncing Technology\n========================================================\n\n![Multiplexing](./images/Multiplex_Seqeuncing.jpg)\n\n\nRevisiting File Formats\n========================================================\nid: FileFormat\n\n## Genomic File Format Course\n<br><br><br>\n## http://mrccsc.github.io/genomic_formats/genomicFileFormats.html)\n\n\nQuality Assessment of Sequencing\n========================================================\nid: SeqQC\n\n- Summary\n- Quality score distribtion (5' to 3')\n- Adapter contamination\n- GC Content\n- Distribution of A/T/G/C along the sequence\n\n\nQuality Assessment of Sequencing\n========================================================\n\n### R Packages: ShortRead, Rqc, SeqTools\n\n<br>\n### Quality assessment using ShortRead\n\n<br> Key Functions in ShortRead\n- <b>FastqStreamer</b> Iterate through FASTQ files in chunks\n- <b>readFastq</b> Read an entire FASTQ file into memory\n- <b>alphabetFrequency</b> Nucleotide or quality score use per read\n- <b>alphabetByCycle</b> Nucleotide or quality score use by cycle\n- <b>report</b> Generate a quality assessment report\n\n\n```{r, echo=TRUE, eval=TRUE, message=FALSE}\nlibrary(ShortRead)\n\nfastqfile <- system.file(package=\"ShortRead\", \"extdata\", \"E-MTAB-1147\",\"ERR127302_1_subset.fastq.gz\")\nfq <- readFastq(fastqfile)\n\n```\n\nQuality Assessment of Sequencing\n========================================================\n\n### Exploring sequences and Quality Scores\n```{r, echo=TRUE, eval=TRUE, message=FALSE}\nfq\nhead(sread(fq), 2)\nhead(quality(fq), 2)\n```\n\nQuality Assessment of Sequencing\n========================================================\n\n### Quality assessment Report\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\nqaSummary <- qa(fastqfile, type=\"fastq\")\nbrowseURL(report(qaSummary))\n```\n\n\n\nQuality Assessment of Sequencing\n========================================================\n\n<br><br>\n### Non-R approach: FASTQC\n\n- Handles FASTQ, BAM and SAM Files\n- Provies summary table and graphs\n- Exports results in HTML\n- GUI & ability to run multiple FASTQ in offline mode\n\n### Webpage: http://www.bioinformatics.babraham.ac.uk/projects/fastqc/\n\n\nQuality Assessment of Sequencing\n========================================================\n![FASTQC1](./images/FAQSTQC1.png)\n\n\nQuality Assessment of Sequencing\n========================================================\n![FASTQC2](./images/FASTQC2.png)\n\n\nAdapter & Quality Trimming\n========================================================\n\n- Seqtk (https://github.com/lh3/seqtk)\n- Trimmomatic (http://www.usadellab.org/cms/?page=trimmomatic)\n- Cutadpat (https://github.com/marcelm/cutadapt)\n- TrimGalore! - Wrapper for Cutadapt (http://www.bioinformatics.babraham.ac.uk/projects/trim_galore/)\n\n\nTime for Exercises!\n========================================================\n* [Exercises Part1](./AlignmentExercise1.html)\n<br><br>\n\n* [Exercises Part1 Solutions](./AlignmentExercise1_Solutions.html)\n\n\n\n\nSequence Alignment\n========================================================\nid: align\n\n\n![Alignment](./images/alignment1.jpg)\n\n### Challenges\n- Millions of short reads (36bp to 100bp)\n- Identifying unique positions in the genome\n- Repetitive regions in the genome\n- Orientation of reads relative to genome is not known\n- Sequencing reads have error\n\nSequence Alignment\n========================================================\n\n### How to\n- Align reads efficiently in terms of memory and time?\n- Account for mismatches and repeat regions \n\n\n<br><br>\n### Two approaches\n- Spaced seed and Extend\n    + MAQ\n    + BFAST\n    + SHRiMP\n- Burrows-Wheeler transform (BWT)\n    + BWA\n    + Bowtie\n\n\nSpaced Seed & Extend\n========================================================\n\n#{.right}\n![seed](./images/spacedseed.jpeg)\n\n- Reference genome cut in to small \"seeds\"\n- Pairs of spaced seeds are stored in index (lookup table)\n- Seqeucning reads cut into 4 equal parts (read seeds)\n- Seed pairs are used as keys to search the lookup table\n\n\nBurrows-Wheeler transform (BWT)\n========================================================\n\n#{.right}\n![bwt](./images/bwt.jpeg)\n\n- BWT helps to index entire human genome in less than 2 gb memory\n- Aligner matches end of reads against the index (increasing one base at a time)\n- If no perfect alignment found,  back up and try again with substitution\n- Breakdown approach: First solving simple sub-problem (aligning one base) and use that to solve slighly harder problem (aligning two base)\n- ~30 fold faster than spaced seed methods\n\n\nSpliced read aligners\n========================================================\n\n![alignment2](./images/alignment2.jpg)\n\n\n- Aligning transcript reads to genome (reads overlapping with exon-exon junction)\n- With or without known exon-exon junction databases\n- Aligners: Tophat, STAR, MapSplice\n\n\nAligning Sequences\n========================================================\ntype: section\nid: align2\n\n\nAligning sequences with Rbowtie\n========================================================\n\n### Required Input\n- Genome fasta\n- Sequencing reads (fastq)\n- User specified parameters \n\n<br><br><br>\n### Data\n\n- ChIPseq of CTCF, bone marrow macrophage (Mus musculus) from ENCODE (https://www.encodeproject.org/experiments/ENCSR000CFJ/)\n- Reads from chr1 used for this exercise\n\n\nAligning sequences with Rbowtie\n========================================================\n\n### Building Index for the genome\n\n#### Help for building index: bowtie_build_usage()\n\n```{r, echo=TRUE, eval=TRUE, message=FALSE}\nlibrary(Rbowtie)\nbowtie_build_usage()\n```\n\nAligning sequences with Rbowtie\n========================================================\n\n### Building Index\n\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\nrefFasta <- list.files(path=\"Data\",pattern=\"*.fa$\", full=T)\ntmp <- bowtie_build(references=refFasta, outdir=\"Data\", prefix=\"mm9index_chr1_chr2\", force=TRUE)\n```\n\nAligning sequences with Rbowtie\n========================================================\n\n#### Help for aligning sequences: bowtie_usage()\n\n```{r, echo=TRUE, eval=TRUE, message=FALSE, strip.white=T}\nbowtie_usage()\n```\n\n\nAligning sequences with Rbowtie\n========================================================\n\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\n\nbowtie(sequences=\"Data/ENCFF001LGM_chr1.fastq\",\n       index=file.path(\"Data\", \"mm9index_chr1_chr2\"), \n       outfile=\"Data/CTCF_mm9_MF.sam\", \n       sam=TRUE, \n       best=TRUE, \n       force=TRUE,\n       type=\"single\", m=1\n       )\n\n```\n\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\n# reads processed: 2184953\n# reads with at least one reported alignment: 2164338 (99.06%)\n# reads that failed to align: 18292 (0.84%)\n# reads with alignments suppressed due to -m: 2323 (0.11%)\n# Reported 2164338 alignments to 1 output stream(s)\n```\n\n\n\nSpliced Alignment using SpliceMap\n========================================================\n\n- To generate spliced alignments (RNA-Seq)\n- SpliceMap uses bowtie\n- Accepts paramets as named list\n- Limitation: reads should be at least 50bp\n\n\n### Data\n- RNA-Seq of NIH3T3 (Mus musculus) from ENCODE: https://www.encodeproject.org/experiments/ENCSR000CLW/\n- Single end\n- Reads from chr1 used for this exercise\n\n\nSpliced Alignment using SpliceMap\n========================================================\n\n### Aligning the sequences using SpliceMap\n\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\nreadsFiles <- \"Data/ENCFF001QSC_chr1.fastq\"\nrefDir <- \"Data/chr1.fa\"\nindexDir <- file.path(tempdir(), \"refsIndex\")\nsamFiles <- \"Data/ENCFF001QSC_chr1.sam\"\ncfg <- list(genome_dir=refDir,\n            reads_list1=readsFiles,\n            read_format=\"FASTQ\",\n            quality_format=\"phred-33\",\n            outfile=samFiles,\n            temp_path=tempdir(),\n            max_intron=400000,\n            max_multi_hit=10,\n            seed_mismatch=1,\n            read_mismatch=2,\n            num_chromosome_together=2,\n            bowtie_base_dir=\"Data/mm9index_chr1_chr2\",\n            num_threads=4,\n            try_hard=\"yes\",\n            selectSingleHit=TRUE)\nres <- SpliceMap(cfg)\n```\n\n\n\n\nSorting & Indexing\n========================================================\ntype: section\nid: Sorting\n\n\nSorting & Indexing the SAM/BAM\n========================================================\n\n<br><br>\n### Sorting SAM/BAM\n\n- Most post-processing methods requires reads sorted by aligned position\n- Sorted and indexed large files enable random access of required genomic regions\n\n### Tools\n- R: Rsamtools\n- Non-R: samtools, Picard\n\n\nSorting & Indexing the SAM/BAM\n========================================================\n<br><br>\n### Convert SAM to BAM\n\n- `asBam` converts SAM to BAM, sort and index\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\nlibrary(Rsamtools)\ninsam <- \"Data/CTCF_mm9_MF.sam\"\noutbam <- \"Data/CTCF_mm9_MF\"\nasBam(insam, outbam)\n```\n\n- Sorting and Indexing a BAM\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\nsortBam(InputBAM, SortedBAM, byQname=F, maxMemory=512)\nindexBam(SortedBAM)\n```\n\n\nFew key functions in Rsamtools\n========================================================\n\n- <b>scanBamHeader</b>: Read the SAM header section\n- <b>countBam</b>: Count number reads (accepts `ScanBamParam` object)\n- <b>mergeBam</b>: Merge BAM files\n- <b>asSam</b>: Convert BAM to SAM\n\n<br><br>\n```{r, echo=TRUE, eval=TRUE, message=FALSE}\nheaderinfo <- scanBamHeader(\"Data/CTCF_mm9_MF.bam\")\n\nchrsinbam <- lapply(scanBamHeader(\"Data/CTCF_mm9_MF.bam\"),function(h) {names(h$targets)})\nchrsinbam <- as.vector(unlist(chrsinbam))\nchrsinbam\n```\n\n\nSorting & Indexing using samtools\n========================================================\n\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\nsamtools view -b in.sam > out.bam\nsamtools sort in.bam outputprefix\nsamtools index sorted.bam\n```\n\n\nSummary & Post-Alignment QC\n========================================================\ntype: section\nid: QC\n\n\nSummary & Post-Alignment QC\n========================================================\n<br>\n### Alignment Summary\n- Alignment rate\n- Primary and secondary alignments\n- Percentage of Duplicate reads\n- rRNA/mtDNA reads\n- Paired reads: properly paired, unpaired, chimeric pair\n\n```{r, echo=TRUE, eval=TRUE, message=FALSE, cache=T}\nparam1 <- ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE, isDuplicate=FALSE))\ncountBam(\"Data/CTCF_mm9_MF.bam\",param=param1)\n```\n\n<br>\n### Using samtools\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\nsamtools flagstat in.bam\n```\n\n\nChIP-Seq QC\n========================================================\n\n- Reads summary\n- Duplicate percentage\n- Estimation of Fragment Length\n- Cross-Coverage score at the fragment length\n- Cross-coverage score at the fragment length over Cross-coverage at the read length\n- Percentage of reads wthin peaks\n- Percentage of reads wthin Blacklist regions\n\n## R package: ChIPQC (https://bioconductor.org/packages/release/bioc/html/ChIPQC.html)\n\n\nRNA-Seq QC\n========================================================\n\n- Reads Summary\n- Uniformity of 5' to 3' gene coverage bias\n- Percentage of reads on exons\n- Strand specificity\n- Correlation between replicates\n\n### Tools: \n- RSeQC http://rseqc.sourceforge.net/\n- Picard (CollectRnaSeqMetrics)\n- RNA-SeQC \n\n\nReading BAM/SAM\n========================================================\ntype: section\nid: readbam\n\n\nReading BAM/SAM\n========================================================\n\n### Methods for reading BAM/SAM\n\n- <b>readAligned</b> from ShortRead package \n    – Accept multiple formats – BAM, export\n    - Reads all files in a directory\n    - Reads base call qualities, chromosome, position, and strand\n- <b>scanBam</b> from Rsamtools package\n    - scanBam reads BAM files into list structure\n    - Options to select what fields and which records to import using <b>ScanBamParam</b>\n- <b>readGAlignments</b> and <b>readGAlignmentPairs</b> from GenomicAlignments package\n    - can accept <b>ScanBamParam</b> object\n\n\n\nReading BAM/SAM\n========================================================\n\n<b>ScanBamParam:</b>\n\n```{r, echo=TRUE, eval=FALSE, message=FALSE}\n# Constructor\nScanBamParam(flag = scanBamFlag(), what = character(0), which)\n\n# Constructor helpers\nscanBamFlag(isPaired = NA, isProperPair = NA, isUnmappedQuery = NA, \n    hasUnmappedMate = NA, isMinusStrand = NA, isMateMinusStrand = NA,\n    isFirstMateRead = NA, isSecondMateRead = NA, isNotPrimaryRead = NA,\n    isNotPassingQualityControls = NA, isDuplicate = NA)\n```\n\nReading BAM/SAM\n========================================================\n\n- GenomicRanges package defines the GAlignments class – a specialised class for storing set of genomic alignments (ex: sequencing data) \n- Only BAM support now – future version may include other formats\n- The readGAlignments function takes an additional argument, <b>param</b> allowing the user to customise which genomic regions and which fields to read from BAM\n-<b>param</b> can be constructed using </b>ScanBamParam</b> function\n\n```{r, echo=TRUE, eval=TRUE,  message=FALSE, cache=T}\nlibrary(GenomicAlignments)\nbamin <- \"Data/CTCF_mm9_MF.bam\"\nSampleAlign <- readGAlignments(bamin)\nSampleAlign\n```\n\n\n\nReading Sequence alignments (BAM/SAM)\n========================================================\n\nWe can also customise which regions to read\n```{r, echo=TRUE, eval=TRUE,  message=FALSE, cache=T}\nregion <- GRanges(\"chr1\",IRanges(3000000,5000000))\nparam1 <- ScanBamParam(what=c(\"rname\", \"pos\", \"cigar\",\"qwidth\"),which=region, flag=scanBamFlag(isUnmappedQuery=FALSE, isDuplicate=FALSE, isNotPassingQualityControls=FALSE))\nSampleAlign1 <- readGAlignments(bamin,param=param1)\n```\n\n\n\n",
    "created" : 1469197993201.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "477344553",
    "id" : "7B280C0C",
    "lastKnownWriteTime" : 1469198003,
    "last_content_update" : 1469198003728,
    "path" : "~/Documents/ComputionalBiologyWorkshop/2016/Alignment_indesign/Alignment/course/Alignment.Rpres",
    "project_path" : "Alignment.Rpres",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}